"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Logical English
patterns:
- include: "#keywords"
- include: "#strings"
- include: "#comments"
- include: "#multiline-comments"
- include: "#template-headers"
- include: "#knowledge-base-headers"
- include: "#scenario-headers"
- include: "#query-headers"
- include: "#template-types"
- include: "#predefined-constants"

repository:
  keywords:
    patterns:
    - name: keyword.control.logical-english
      match: '\b(if|then|it is the case that|it is not the case that)\b'

  comments:
    match: '(%)(.*)'
    name: comment.line.percentage.logical-english
    captures:
      '1': 
        name: punctuation.definition.comment.logical-english
  
  multiline-comments:
    name: comment.block.logical-english
    begin: /\*
    beginCaptures:
      "0":
        name: punctuation.definition.comment.block.begin.logical-english
    end: \*/
    endCaptures:
      "0":
        name: punctuation.definition.comment.block.end.logical-english
  
  template-headers:
    match: '^(\s*)(the templates are)(:)(\s*)$'
    name: entity.template.logical-english
    captures:
      '2': 
        name: storage.type.template.logical-english
      '3':
        name: punctuation.section.template.begin.logical-english

  knowledge-base-headers:
    match: '^(\s*)(the knowledge base \w[\w|\s]+)(:)(\s*)$'
    name: entity.knowledge-base.logical-english
    captures:
      '2': 
        name: storage.type.knowledge-base.logical-english
      '4':
        name: punctuation.section.knowledge-base.begin.logical-english
  
  scenario-headers:
    begin: '^(\s*)(scenario)'
    beginCaptures:
      '2': { name: storage.type.scenario.logical-english }
    end: '(is)(?=:\s*$)'
    endCaptures:
      '1': { name: storage.type.scenario.logical-english }
      '2': { name: punctuation.section.scenario.begin.logical-english }
    name: entity.scenario.logical-english
    patterns:
      - match: ' (\w[\w|\s]*) '
        name: entity.name.scenario.logical-english
  
  query-headers:
    begin: '^(\s*)(query)'
    beginCaptures:
      '2': { name: storage.type.query.logical-english }
    end: '(is)(?=:\s*$)'
    endCaptures:
      '1': { name: storage.type.query.logical-english }
      '2': { name: punctuation.section.query.begin.logical-english }
    name: entity.query.logical-english
    patterns:
      - match: ' (\w[\w|\s]*) '
        name: entity.name.query.logical-english
  
  template-types:
    match: '(\*)((a|an) )?(\w[\w|\s]*)(\*)'
    name: entity.type.template.logical-english
    captures:
      '1':
        name: punctuation.definition.type.begin.logical-english
      '4':
        name: entity.name.type.template-type.logical-english
      '5':
        name: punctuation.definition.type.end.logical-english

  predefined-constants:
    match: '\b(unknown)\b'
    name: variable.special.predefined.logical-english
      
scopeName: source.logical-english
